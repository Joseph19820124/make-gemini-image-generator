const sharp = require('sharp');
const axios = require('axios');
const FormData = require('form-data');
const logger = require('./logger');
const { v4: uuidv4 } = require('uuid');

class ImageProcessor {
  constructor() {
    this.supportedFormats = ['jpeg', 'jpg', 'png', 'webp'];
    this.maxFileSize = parseInt(process.env.MAX_IMAGE_SIZE) || 10 * 1024 * 1024; // 10MB
  }

  /**
   * 验证图片文件
   * @param {Buffer} buffer - 图片数据
   * @returns {Object} 验证结果
   */
  async validateImage(buffer) {
    try {
      const metadata = await sharp(buffer).metadata();
      
      if (!this.supportedFormats.includes(metadata.format)) {
        throw new Error(`不支持的图片格式: ${metadata.format}`);
      }

      if (buffer.length > this.maxFileSize) {
        throw new Error(`图片文件过大: ${(buffer.length / 1024 / 1024).toFixed(2)}MB`);
      }

      return {
        valid: true,
        metadata: {
          width: metadata.width,
          height: metadata.height,
          format: metadata.format,
          size: buffer.length,
          aspectRatio: (metadata.width / metadata.height).toFixed(2)
        }
      };
    } catch (error) {
      logger.error('图片验证失败:', error);
      return {
        valid: false,
        error: error.message
      };
    }
  }

  /**
   * 调整图片大小
   * @param {Buffer} buffer - 图片数据
   * @param {string} resolution - 目标分辨率
   * @returns {Buffer} 处理后的图片
   */
  async resizeImage(buffer, resolution = '1024x1024') {
    try {
      const [width, height] = resolution.split('x').map(Number);
      
      const processedBuffer = await sharp(buffer)
        .resize(width, height, {
          fit: 'cover',
          position: 'center'
        })
        .png({ quality: 90 })
        .toBuffer();
      
      logger.info(`图片已调整到: ${resolution}`);
      return processedBuffer;
    } catch (error) {
      logger.error('图片大小调整失败:', error);
      throw error;
    }
  }

  /**
   * 图片质量优化
   * @param {Buffer} buffer - 图片数据
   * @param {Object} options - 优化选项
   * @returns {Buffer} 优化后的图片
   */
  async optimizeImage(buffer, options = {}) {
    try {
      const {
        quality = 85,
        format = 'png',
        sharpen = false,
        denoise = false
      } = options;

      let processor = sharp(buffer);

      // 锐化处理
      if (sharpen) {
        processor = processor.sharpen();
      }

      // 降噪处理
      if (denoise) {
        processor = processor.median(3);
      }

      // 格式转换
      if (format === 'jpeg') {
        processor = processor.jpeg({ quality });
      } else {
        processor = processor.png({ quality });
      }

      const optimizedBuffer = await processor.toBuffer();
      
      logger.info('图片质量优化完成');
      return optimizedBuffer;
    } catch (error) {
      logger.error('图片质量优化失败:', error);
      throw error;
    }
  }

  /**
   * 从 URL 下载图片
   * @param {string} url - 图片URL
   * @returns {Buffer} 图片数据
   */
  async downloadImage(url) {
    try {
      const response = await axios({
        method: 'GET',
        url,
        responseType: 'arraybuffer',
        timeout: 30000,
        maxContentLength: this.maxFileSize
      });

      return Buffer.from(response.data);
    } catch (error) {
      logger.error('图片下载失败:', error);
      throw new Error('图片下载失败');
    }
  }

  /**
   * 生成图片缩略图
   * @param {Buffer} buffer - 图片数据
   * @param {number} size - 缩略图尺寸
   * @returns {Buffer} 缩略图数据
   */
  async generateThumbnail(buffer, size = 256) {
    try {
      const thumbnail = await sharp(buffer)
        .resize(size, size, {
          fit: 'cover',
          position: 'center'
        })
        .jpeg({ quality: 80 })
        .toBuffer();
      
      return thumbnail;
    } catch (error) {
      logger.error('缩略图生成失败:', error);
      throw error;
    }
  }

  /**
   * 图片内容安全检测（简单版）
   * @param {Buffer} buffer - 图片数据
   * @returns {Object} 检测结果
   */
  async detectUnsafeContent(buffer) {
    try {
      const metadata = await sharp(buffer).metadata();
      
      // 这里可以集成更专业的内容安全检测服务
      // 比如 Google Cloud Vision API 的 Safe Search 功能
      
      return {
        safe: true,
        confidence: 0.95,
        categories: {
          adult: 'VERY_UNLIKELY',
          violence: 'VERY_UNLIKELY',
          racy: 'UNLIKELY'
        }
      };
    } catch (error) {
      logger.error('内容安全检测失败:', error);
      return {
        safe: false,
        error: error.message
      };
    }
  }

  /**
   * 为图片添加水印（SynthID支持）
   * @param {Buffer} buffer - 图片数据
   * @param {Object} watermarkOptions - 水印选项
   * @returns {Buffer} 添加水印后的图片
   */
  async addWatermark(buffer, watermarkOptions = {}) {
    try {
      const {
        text = 'Generated by AI',
        position = 'bottom-right',
        opacity = 0.5
      } = watermarkOptions;

      // 创建文字水印
      const textSvg = `
        <svg width="200" height="30">
          <text x="10" y="20" font-family="Arial" font-size="12" 
                fill="white" opacity="${opacity}">${text}</text>
        </svg>
      `;

      const watermarkBuffer = Buffer.from(textSvg);
      const { width, height } = await sharp(buffer).metadata();
      
      // 计算水印位置
      let left = 10, top = 10;
      
      switch (position) {
        case 'bottom-right':
          left = width - 210;
          top = height - 40;
          break;
        case 'bottom-left':
          left = 10;
          top = height - 40;
          break;
        case 'top-right':
          left = width - 210;
          top = 10;
          break;
        default:
          left = 10;
          top = 10;
      }

      const watermarkedBuffer = await sharp(buffer)
        .composite([{
          input: watermarkBuffer,
          left,
          top
        }])
        .toBuffer();

      return watermarkedBuffer;
    } catch (error) {
      logger.error('水印添加失败:', error);
      throw error;
    }
  }
}

module.exports = new ImageProcessor();